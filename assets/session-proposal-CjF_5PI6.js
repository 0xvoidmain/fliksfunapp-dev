import{z as m,A as p,B as d}from"./index-DlK-volk.js";async function l(n){const{wallet:i,walletConnectClient:e,event:s,chains:t,onConnect:r}=n,o=i.getAccount();if(!o)throw new Error("No account connected to provided wallet");const a=s.verifyContext?.verified?.origin;a&&await w({origin:a,walletConnectClient:e});const c=await f({account:o,chains:t,sessionProposal:s,walletConnectClient:e});await m(c),i.subscribe("disconnect",()=>{p({session:c,walletConnectClient:e})}),r?.(c)}async function w({walletConnectClient:n,origin:i}){const e=await d();for(const s of e)s.origin===i&&await p({session:s,walletConnectClient:n})}async function f({account:n,walletConnectClient:i,sessionProposal:e,chains:s}){if(!e.params.requiredNamespaces?.eip155&&!e.params.optionalNamespaces?.eip155)throw new Error("No EIP155 namespace found in Wallet Connect session proposal");const t={chains:[...Array.from(new Set([...e.params.requiredNamespaces?.eip155?.chains?.map(a=>`${a}:${n.address}`)??[],...e.params.optionalNamespaces?.eip155?.chains?.map(a=>`${a}:${n.address}`)??[],...s?.map(a=>`eip155:${a.id}:${n.address}`)??[]]))],events:[...e.params.requiredNamespaces?.eip155?.events??[],...e.params.optionalNamespaces?.eip155?.events??[]],methods:[...e.params.requiredNamespaces?.eip155?.methods??[],...e.params.optionalNamespaces?.eip155?.methods??[]]},o=await(await i.approve({id:e.id,namespaces:{eip155:{accounts:t.chains,events:t.events,methods:t.methods}}})).acknowledged();return{origin:e.verifyContext?.verified?.origin||"Unknown origin",topic:o.topic}}export{f as acceptSessionProposal,w as disconnectExistingSessions,l as onSessionProposal};
