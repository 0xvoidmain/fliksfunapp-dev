const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/switch-chain-Dejdvmq9.js","assets/index-DEk_hmx_.js","assets/index-D4de1b0T.css"])))=>i.map(i=>d[i]);
import{b6 as w,b7 as T,w as d,d as y,af as b,h as v,_ as C}from"./index-DEk_hmx_.js";async function E(i){const{account:e,chainId:a,params:[h]}=i;if(!e.sendRawTransaction)throw new Error("The current account does not support sending raw transactions");return(await e.sendRawTransaction({chainId:a,rawTransaction:h})).transactionHash}function u(i,e){if(w(i.address)!==w(e))throw new Error(`Failed to validate account address (${i.address}), differs from ${e}`)}function m(i){const e=i.split(":"),a=Number.parseInt(e[1]??"0");if(e.length!==2||e[0]!=="eip155"||a===0||!a)throw new Error(`Invalid chainId ${i}, should have the format 'eip155:1'`);return a}async function R(i){const{account:e,chainId:a,thirdwebClient:h,params:[c]}=i;c.from!==void 0&&u(e,c.from);const l=T({chain:y(a),client:h,data:c.data,gas:c.gas?d(c.gas):void 0,gasPrice:c.gasPrice?d(c.gasPrice):void 0,to:c.to,value:c.value?d(c.value):void 0});return(await b({account:e,transaction:l})).transactionHash}async function f(i){const{account:e,params:a}=i;return u(e,a[1]),e.signMessage({message:{raw:a[0]}})}async function I(i){const{account:e,params:[a]}=i;if(!e.signTransaction)throw new Error("The current account does not support signing transactions");return a.from!==void 0&&u(e,a.from),e.signTransaction({data:a.data,gas:a.gas?d(a.gas):void 0,gasPrice:a.gasPrice?d(a.gasPrice):void 0,nonce:a.nonce?v(a.nonce):void 0,to:a.to,value:a.value?d(a.value):void 0})}async function g(i){const{account:e,params:a}=i;return u(e,a[0]),e.signTypedData(typeof a[1]=="string"?JSON.parse(a[1]):a[1])}async function q(i){const{wallet:e,walletConnectClient:a,thirdwebClient:h,event:{topic:c,id:l,params:{chainId:p,request:n}},handlers:s}=i,o=e.getAccount();if(!o)throw new Error("No account connected to provided wallet");let t;try{switch(n.method){case"personal_sign":{s?.personal_sign?t=await s.personal_sign({account:o,params:n.params}):t=await f({account:o,params:n.params});break}case"eth_sign":{s?.eth_sign?t=await s.eth_sign({account:o,params:n.params}):t=await f({account:o,params:n.params});break}case"eth_signTypedData":{s?.eth_signTypedData?t=await s.eth_signTypedData({account:o,params:n.params}):t=await g({account:o,params:n.params});break}case"eth_signTypedData_v4":{s?.eth_signTypedData_v4?t=await s.eth_signTypedData_v4({account:o,params:n.params}):t=await g({account:o,params:n.params});break}case"eth_signTransaction":{s?.eth_signTransaction?t=await s.eth_signTransaction({account:o,params:n.params}):t=await I({account:o,params:n.params});break}case"eth_sendTransaction":{const r=m(p);s?.eth_sendTransaction?t=await s.eth_sendTransaction({account:o,chainId:r,params:n.params}):t=await R({account:o,chainId:r,params:n.params,thirdwebClient:h});break}case"eth_sendRawTransaction":{const r=m(p);s?.eth_sendRawTransaction?t=await s.eth_sendRawTransaction({account:o,chainId:r,params:n.params}):t=await E({account:o,chainId:r,params:n.params});break}case"wallet_addEthereumChain":{if(s?.wallet_addEthereumChain)t=await s.wallet_addEthereumChain({params:n.params,wallet:e});else throw new Error("Unsupported request method: wallet_addEthereumChain");break}case"wallet_switchEthereumChain":{if(s?.wallet_switchEthereumChain)t=await s.wallet_switchEthereumChain({params:n.params,wallet:e});else{const{handleSwitchChain:r}=await C(async()=>{const{handleSwitchChain:_}=await import("./switch-chain-Dejdvmq9.js");return{handleSwitchChain:_}},__vite__mapDeps([0,1,2]));t=await r({params:n.params,wallet:e})}break}default:{const r=s?.[n.method];if(r)t=await r({account:o,chainId:m(p),params:n.params});else throw new Error(`Unsupported request method: ${n.method}`)}}}catch(r){t={code:typeof r=="object"&&r!==null&&"code"in r?r.code:500,message:typeof r=="object"&&r!==null&&"message"in r?r.message:"Unknown error"}}a.respond({response:{id:l,jsonrpc:"2.0",result:t},topic:c})}export{q as fulfillRequest};
